import os
import logging
import asyncio
from datetime import datetime, time
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import init_db, get_session
from models import User, Question, UserAnswer
from sqlalchemy import select, func
import random
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    async for session in get_session():
        user = await session.execute(select(User).filter(User.telegram_id == update.effective_user.id))
        user = user.scalar_one_or_none()
        
        if user:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            keyboard = [
                ["üìù –©–æ–¥–µ–Ω–Ω–∏–π —Ç–µ—Å—Ç"],
                ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω—å"],
                ["üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É –ö—Ä–∞—ó–Ω–∞ –ú—Ä—ñ–π. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                reply_markup=reply_markup
            )
        else:
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –ø–æ—á–∏–Ω–∞—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
            await update.message.reply_text(
                "–í—ñ—Ç–∞—é! –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:"
            )
            context.user_data['registration_step'] = 'name'

async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–∫—Ä–æ–∫–æ–≤–æ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"""
    step = context.user_data.get('registration_step')
    
    if not step:
        return
        
    if step == 'name':
        context.user_data['name'] = update.message.text
        await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:")
        context.user_data['registration_step'] = 'surname'
        
    elif step == 'surname':
        context.user_data['surname'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –ø–æ—Å–∞–¥—É:")
        context.user_data['registration_step'] = 'position'
        
    elif step == 'position':
        context.user_data['position'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É:")
        context.user_data['registration_step'] = 'establishment'
        
    elif step == 'establishment':
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –≤ –±–∞–∑—É
            full_name = f"{context.user_data['name']} {context.user_data['surname']}"
            async for session in get_session():
                user = User(
                    telegram_id=update.effective_user.id,
                    full_name=full_name,
                    city=update.message.text,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤—É –∑–∞–∫–ª–∞–¥—É —è–∫ –º—ñ—Å—Ç–æ
                    position=context.user_data['position']
                )
                session.add(user)
                await session.commit()
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
            keyboard = [
                ["üìù –©–æ–¥–µ–Ω–Ω–∏–π —Ç–µ—Å—Ç"],
                ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω—å"],
                ["üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞.",
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            context.user_data.clear()
        except Exception as e:
            await update.message.reply_text(
                "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É /start"
            )
            context.user_data.clear()

async def send_daily_questions():
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å"""
    async for session in get_session():
        users = await session.execute(select(User))
        for user in users.scalars():
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å
            questions = await session.execute(
                select(Question).order_by(func.random()).limit(5)
            )
            questions = questions.scalars().all()
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            for i, question in enumerate(questions, 1):
                keyboard = [
                    [InlineKeyboardButton(question.correct_answer, callback_data=f'answer_{question.id}_correct')],
                    [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è", callback_data=f'explain_{question.id}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # TODO: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                # await context.bot.send_message(
                #     chat_id=user.telegram_id,
                #     text=f"–ü–∏—Ç–∞–Ω–Ω—è {i}/5:\n{question.text}",
                #     reply_markup=reply_markup
                # )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –ø–∏—Ç–∞–Ω–Ω—è –∑ callback_data
    question_id = int(query.data.split('_')[1])
    
    async for session in get_session():
        question = await session.execute(select(Question).filter(Question.id == question_id))
        question = question.scalar_one_or_none()
        
        if question:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            user = await session.execute(select(User).filter(User.telegram_id == update.effective_user.id))
            user = user.scalar_one_or_none()
            
            if user:
                answer = UserAnswer(
                    user_id=user.id,
                    question_id=question.id,
                    answer=query.data,
                    is_correct=True
                )
                session.add(answer)
                await session.commit()
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                user.daily_score += 1
                user.total_score += 1
                await session.commit()
                
                await query.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª")
            else:
                await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É")

async def show_explanation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
    query = update.callback_query
    await query.answer()
    
    question_id = int(query.data.split('_')[1])
    
    async for session in get_session():
        question = await session.execute(select(Question).filter(Question.id == question_id))
        question = question.scalar_one_or_none()
        
        if question:
            await query.message.reply_text(f"–ü–æ—è—Å–Ω–µ–Ω–Ω—è: {question.explanation}")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    await query.answer()
    
    async for session in get_session():
        user = await session.execute(select(User).filter(User.telegram_id == update.effective_user.id))
        user = user.scalar_one_or_none()
        
        if user:
            stats_text = (
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.full_name}:\n"
                f"–©–æ–¥–µ–Ω–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {user.daily_score}\n"
                f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {user.total_score}\n"
                f"–ú—ñ—Å—Ç–æ: {user.city}\n"
                f"–ü–æ—Å–∞–¥–∞: {user.position}"
            )
            await query.message.reply_text(stats_text)
        else:
            await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É")

async def show_knowledge_base(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–°–µ—Ä–≤—ñ—Å", callback_data='kb_service')],
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='kb_menu')],
        [InlineKeyboardButton("–ë–µ–∑–ø–µ–∫–∞", callback_data='kb_safety')],
        [InlineKeyboardButton("–ö—É–ª—ñ–Ω–∞—Ä—ñ—è", callback_data='kb_cooking')],
        [InlineKeyboardButton("–ï—Ç–∏–∫–µ—Ç", callback_data='kb_etiquette')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
        reply_markup=reply_markup
    )

async def show_knowledge_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ –æ–±—Ä–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    query = update.callback_query
    await query.answer()
    
    category = query.data.split('_')[1]
    
    # TODO: –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    category_info = {
        'service': "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å...",
        'menu': "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–µ–Ω—é...",
        'safety': "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–µ–∑–ø–µ–∫—É...",
        'cooking': "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É–ª—ñ–Ω–∞—Ä—ñ—é...",
        'etiquette': "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –µ—Ç–∏–∫–µ—Ç..."
    }
    
    await query.message.reply_text(category_info.get(category, "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è"))

async def start_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("–û—Ü—ñ–Ω–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è", callback_data='feedback_learning')],
        [InlineKeyboardButton("–û—Ü—ñ–Ω–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é", callback_data='feedback_menu')],
        [InlineKeyboardButton("–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", callback_data='feedback_suggest')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É:",
        reply_markup=reply_markup
    )

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É"""
    query = update.callback_query
    await query.answer()
    
    feedback_type = query.data.split('_')[1]
    
    if feedback_type == 'learning':
        keyboard = [
            [InlineKeyboardButton("1", callback_data='rate_1'), InlineKeyboardButton("2", callback_data='rate_2'),
             InlineKeyboardButton("3", callback_data='rate_3'), InlineKeyboardButton("4", callback_data='rate_4'),
             InlineKeyboardButton("5", callback_data='rate_5')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–û—Ü—ñ–Ω—ñ—Ç—å —è–∫—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è (1-5):", reply_markup=reply_markup)
    
    elif feedback_type == 'menu':
        keyboard = [
            [InlineKeyboardButton("1", callback_data='rate_menu_1'), InlineKeyboardButton("2", callback_data='rate_menu_2'),
             InlineKeyboardButton("3", callback_data='rate_menu_3'), InlineKeyboardButton("4", callback_data='rate_menu_4'),
             InlineKeyboardButton("5", callback_data='rate_menu_5')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–û—Ü—ñ–Ω—ñ—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–Ω—é (1-5):", reply_markup=reply_markup)
    
    elif feedback_type == 'suggest':
        await query.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:")
        context.user_data['state'] = 'waiting_suggestion'

async def handle_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"""
    if context.user_data.get('state') != 'waiting_suggestion':
        return
    
    suggestion = update.message.text
    
    # TODO: –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    
    await update.message.reply_text("–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó! –ú–∏ —ó—Ö –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ.")
    context.user_data['state'] = None

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ HTML5 –≥—Ä–∏"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    async for session in get_session():
        questions = await session.execute(
            select(Question).order_by(func.random()).limit(5)
        )
        questions = questions.scalars().all()
        
        # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≥—Ä–∏
        game_data = {
            "questions": [
                {
                    "text": q.text,
                    "correct_answer": q.correct_answer,
                    "explanation": q.explanation
                } for q in questions
            ]
        }
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –≥—Ä–∏
        keyboard = [[KeyboardButton(
            text="üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É",
            web_app=WebAppInfo(url="https://kultup.github.io/QuizKM/index.html")
        )]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é —Ç–∞ –¥–∞–Ω–∏–º–∏ –¥–ª—è –≥—Ä–∏
        await update.message.reply_text(
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É:",
            reply_markup=reply_markup
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['game_data'] = game_data

async def handle_game_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥—Ä–∏"""
    if not update.message or not update.message.web_app_data:
        return
    
    try:
        data = json.loads(update.message.web_app_data.data)
        
        if data['type'] == 'game_complete':
            score = data['score']
            
            async for session in get_session():
                user = await session.execute(
                    select(User).filter(User.telegram_id == update.effective_user.id)
                )
                user = user.scalar_one_or_none()
                
                if user:
                    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    user.daily_score = score
                    user.total_score += score
                    await session.commit()
                    
                    await update.message.reply_text(
                        f"–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–∞—Ö—É–Ω–æ–∫: {score}/5\n"
                        f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {user.total_score}"
                    )
                else:
                    await update.message.reply_text(
                        "–ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É."
                    )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥—Ä–∏: {e}")
        await update.message.reply_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥—Ä–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

async def send_daily_questions_periodically():
    """–ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å"""
    while True:
        now = datetime.now().time()
        target_time = time(hour=12, minute=0)
        
        if now.hour == target_time.hour and now.minute == target_time.minute:
            await send_daily_questions()
            # –ß–µ–∫–∞—î–º–æ 24 –≥–æ–¥–∏–Ω–∏
            await asyncio.sleep(24 * 60 * 60)
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
            await asyncio.sleep(60)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_registration))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_game_result))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    text = update.message.text
    
    if text == "üìù –©–æ–¥–µ–Ω–Ω–∏–π —Ç–µ—Å—Ç":
        # –õ–æ–≥—ñ–∫–∞ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
        await send_daily_questions()
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async for session in get_session():
            user = await session.execute(select(User).filter(User.telegram_id == update.effective_user.id))
            user = user.scalar_one_or_none()
            
            if user:
                stats_text = (
                    f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.full_name}:\n"
                    f"–©–æ–¥–µ–Ω–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {user.daily_score}\n"
                    f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {user.total_score}\n"
                    f"–ó–∞–∫–ª–∞–¥: {user.city}\n"
                    f"–ü–æ—Å–∞–¥–∞: {user.position}"
                )
                await update.message.reply_text(stats_text)
    elif text == "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω—å":
        # –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –±–∞–∑–∏ –∑–Ω–∞–Ω—å
        keyboard = [
            ["üçΩÔ∏è –°–µ—Ä–≤—ñ—Å", "üìã –ú–µ–Ω—é"],
            ["üõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞", "üë®‚Äçüç≥ –ö—É–ª—ñ–Ω–∞—Ä—ñ—è"],
            ["üé≠ –ï—Ç–∏–∫–µ—Ç", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)
    elif text == "üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É":
        # –ó–∞–ø—É—Å–∫ –≥—Ä–∏
        await start_game(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            ["üìù –©–æ–¥–µ–Ω–Ω–∏–π —Ç–µ—Å—Ç"],
            ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω—å"],
            ["üéÆ –ü–æ—á–∞—Ç–∏ –≥—Ä—É"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=reply_markup)

if __name__ == '__main__':
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        asyncio.run(init_db())
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–∏—Ç–∞–Ω—å –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.create_task(send_daily_questions_periodically())
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        main()
    except KeyboardInterrupt:
        print('–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π') 